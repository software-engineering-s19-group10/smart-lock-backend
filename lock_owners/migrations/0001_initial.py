# Generated by Django 2.1.7 on 2019-04-21 14:46

import datetime
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Owner',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('full_name', models.CharField(help_text='Full name of the user', max_length=200)),
                ('phone', models.CharField(help_text='User phone number (no spaces or dashes, 10 character max)', max_length=10)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now=True, help_text='Time that the event happened')),
                ('duration', models.IntegerField(help_text='Number of seconds that the event occurred for')),
                ('event_type', models.CharField(help_text='String representing the type of event that occurred', max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='Lock',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address', models.CharField(default='N/A', help_text='Address of the home where the lock is', max_length=400)),
                ('ip_address', models.CharField(default='127.0.0.1', help_text='IP Address of Raspberry Pi so we can connect to it.', max_length=14)),
                ('lock_owner', models.ForeignKey(help_text='User ID who owns the lock', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Permission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('allowed_access_general', models.BooleanField(default=False, help_text='Is the user allowed to open the lock?')),
                ('time_start', models.TimeField(help_text='At what time can the user open the lock every day?')),
                ('time_end', models.TimeField(help_text='Until what time can the user open the lock?')),
                ('lock', models.ForeignKey(help_text='Lock that the permissions act on', on_delete=django.db.models.deletion.CASCADE, to='lock_owners.Lock')),
            ],
        ),
        migrations.CreateModel(
            name='Resident',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('full_name', models.CharField(help_text='Full name of the resident', max_length=200)),
                ('lock', models.ForeignKey(help_text='The lock that this Resident was created for', on_delete=django.db.models.deletion.CASCADE, to='lock_owners.Lock')),
            ],
        ),
        migrations.CreateModel(
            name='ResidentImage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image_bytes', models.BinaryField(editable=True, help_text='Image in bytes')),
                ('resident', models.ForeignKey(help_text='Resident that this is an image of', on_delete=django.db.models.deletion.CASCADE, to='lock_owners.Resident')),
            ],
        ),
        migrations.CreateModel(
            name='StrangerReport',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('latitude', models.FloatField(help_text='latitude of suspicious reporting')),
                ('longitude', models.FloatField(help_text='longitude of suspicious reporting')),
                ('stranger_report_time', models.DateTimeField(default=datetime.datetime(2019, 4, 21, 10, 46, 16, 560230), help_text='Date and time the report was made')),
                ('lock', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lock_owners.Lock')),
            ],
        ),
        migrations.CreateModel(
            name='TempAuth',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('visitor', models.CharField(help_text='Identifying name for the visitor', max_length=200)),
                ('time_created', models.DateTimeField(auto_now=True, help_text='Time that the temporary authentication code was assigned')),
                ('auth_code', models.CharField(default='4e1e68a3-c353-4dea-a26b-fe885c84db32', editable=False, help_text='The temporary authentication code to assign to the user', max_length=200)),
                ('lock', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lock_owners.Lock')),
            ],
        ),
        migrations.AddField(
            model_name='permission',
            name='resident',
            field=models.ForeignKey(help_text='User that permissions are for', on_delete=django.db.models.deletion.CASCADE, to='lock_owners.Resident'),
        ),
        migrations.AddField(
            model_name='event',
            name='lock',
            field=models.ForeignKey(help_text='Lock where the event occurred', on_delete=django.db.models.deletion.CASCADE, to='lock_owners.Lock'),
        ),
        migrations.AddField(
            model_name='owner',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
